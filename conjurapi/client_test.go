package conjurapi

import (
	"github.com/cyberark/conjur-api-go/conjurapi/authn"
	. "github.com/smartystreets/goconvey/convey"
	"testing"
)

func TestNewClientFromKey(t *testing.T) {
	Convey("Has authenticator of type APIKeyAuthenticator", t, func() {
		client, err := NewClientFromKey(
			Config{Account: "account", ApplianceURL: "appliance-url"},
			authn.LoginPair{"login", "api-key"},
		)

		So(err, ShouldBeNil)
		So(client.authenticator, ShouldHaveSameTypeAs, &authn.APIKeyAuthenticator{})
	})
}

func TestClient_GetConfig(t *testing.T) {
	Convey("Returns Client Config", t, func() {
		expectedConfig := Config{
			Account:      "some-account",
			ApplianceURL: "some-appliance-url",
			NetRCPath:    "some-netrc-path",
			SSLCert:      "some-ssl-cert",
			SSLCertPath:  "some-ssl-cert-path",
			V4:           true,
		}
		client := Client{
			config: expectedConfig,
		}

		So(client.GetConfig(), ShouldResemble, expectedConfig)
	})
}

func TestNewClientFromTokenFile(t *testing.T) {
	Convey("Has authenticator of type TokenFileAuthenticator", t, func() {
		client, err := NewClientFromTokenFile(Config{Account: "account", ApplianceURL: "appliance-url"}, "token-file")

		So(err, ShouldBeNil)
		So(client.authenticator, ShouldHaveSameTypeAs, &authn.TokenFileAuthenticator{})
	})
}

func Test_newClientWithAuthenticator(t *testing.T) {
	Convey("Returns nil and error for invalid config", t, func() {
		client, err := newClientWithAuthenticator(Config{}, nil)

		So(client, ShouldBeNil)
		So(err, ShouldNotBeNil)
		So(err.Error(), ShouldContainSubstring, "Must specify")
	})

	Convey("Returns client without error for valid config", t, func() {
		client, err := newClientWithAuthenticator(Config{Account: "account", ApplianceURL: "appliance-url"}, nil)

		So(err, ShouldBeNil)
		So(client, ShouldNotBeNil)
	})

	Convey("Returns client without error for valid SSL Cert", t, func() {

		cert := `-----BEGIN CERTIFICATE-----
MIIFVDCCBDygAwIBAgISBAMVsKsSHyo47axxdaTndZR+MA0GCSqGSIb3DQEBCwUA
MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD
ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xOTAxMTYwMDIwMDJaFw0x
OTA0MTYwMDIwMDJaMBoxGDAWBgNVBAMTD2V2YWwuY29uanVyLm9yZzCCASIwDQYJ
KoZIhvcNAQEBBQADggEPADCCAQoCggEBAOLP4ogV7LdxW1emNnnTpeV6HwMFlJSL
YRsjiqNGjUka/9beD+wobv0TLv+nyEIudO/LY1o0hakEp0UZ3D2nxUbl0oMSCRge
j1fXyjP1nieFsAslHuIGfFdaOPYS/Z4Bu9P56R09lIEi/j2YrFSPFhjfhe1e2Qnf
RYlS/byYuNDJ4hLHIqmc63mgZEqv7rFOCfEYmdeOJvWcJoZHuKk2bcgkMqNTNl/B
Yi1Y3pHqUjBKNeqvRu61ZGbYQAdC1UVssLd5fqozunyD26T9oDaCn13aUe+ThzAh
+ZbYLK/1Kg7/OGO42cLU/KlVhJozfpSueajPkSrU72QwvSHASIGqu8sCAwEAAaOC
AmIwggJeMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYB
BQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUrJ1VL5iIt9iv6/Hu1xyYarru
CRcwHwYDVR0jBBgwFoAUqEpqYwR93brm0Tm3pkVl7/Oo7KEwbwYIKwYBBQUHAQEE
YzBhMC4GCCsGAQUFBzABhiJodHRwOi8vb2NzcC5pbnQteDMubGV0c2VuY3J5cHQu
b3JnMC8GCCsGAQUFBzAChiNodHRwOi8vY2VydC5pbnQteDMubGV0c2VuY3J5cHQu
b3JnLzAaBgNVHREEEzARgg9ldmFsLmNvbmp1ci5vcmcwTAYDVR0gBEUwQzAIBgZn
gQwBAgEwNwYLKwYBBAGC3xMBAQEwKDAmBggrBgEFBQcCARYaaHR0cDovL2Nwcy5s
ZXRzZW5jcnlwdC5vcmcwggECBgorBgEEAdZ5AgQCBIHzBIHwAO4AdQB0ftqDMa0z
EJEhnM4lT0Jwwr/9XkIgCMY3NXnmEHvMVgAAAWhUPmmxAAAEAwBGMEQCIEzR+kBk
IcjtbjUrieOxn7CXIhXYZUVClWk2SMIigpMxAiBRBvNw+L/UgtLqB7N7wr4yrbz5
DGqBhPfGwrL8TKg9pQB1ACk8UZZUyDlluqpQ/FgH1Ldvv1h6KXLcpMMM9OVFR/R4
AAABaFQ+aaUAAAQDAEYwRAIgckH7vMTd2zcd0JPlb1j8wTwqAjY3GyVrxoe7rPpW
UmwCIBMMJLioLgbF5acWqS7LsE7JRaZWnEwtq9IuT1N/ZJ1NMA0GCSqGSIb3DQEB
CwUAA4IBAQBegJfnVGDYvvzdTFWdF1KLyIMgYy0gOPJJ1XG8VVINRz45K405oMG1
JHSPfg2sYQ2xWY3sOCB7OfEwEQ2p1w8IWI5NepHKjSmGG9WuDw+RQFSVqK9xp7TB
aNH9t6gTgGOV5DnxCtn7R+QE5CIUvSMXb6dcqwV4aEPAQiiupzjvPo3NfGF0Mm1T
qbxNCZ180YvZM56SNZz+2PHeA3BtSlWch9cL2Wp+Uhd5Y4Zca6gQbF6ydPmr833k
IcfIFhWTjc+Nvvrz8GM86zRCmA/A5+jdcnf/HWVn4rDSusUtRFqCwI82v57jj55r
J6w1p0fbJNO8op/JV1iaZTVmPUMtcxF5
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/
MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT
DkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow
SjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT
GkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC
AQ8AMIIBCgKCAQEAnNMM8FrlLke3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF
q6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8
SMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0
Z8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA
a6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj
/PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIDAQABo4IBfTCCAXkwEgYDVR0T
AQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG
CCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv
bTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k
c3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAw
VAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC
ARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz
MDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu
Y3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF
AAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo
uM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/
wApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwu
X4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG
PfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6
KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==
-----END CERTIFICATE-----`

		config := Config{Account: "account", ApplianceURL: "appliance-url", SSLCert: cert}

		client, err := newClientWithAuthenticator(config, nil)

		So(err, ShouldBeNil)
		So(client, ShouldNotBeNil)
	})

	Convey("Returns client without error for valid SSL Cert missing some newlines", t, func() {

		cert := `-----BEGIN CERTIFICATE-----
MIIFVDCCBDygAwIBAgISBAMVsKsSHyo47axxdaTndZR+MA0GCSqGSIb3DQEBCwUA MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xOTAxMTYwMDIwMDJaFw0x OTA0MTYwMDIwMDJaMBoxGDAWBgNVBAMTD2V2YWwuY29uanVyLm9yZzCCASIwDQYJ KoZIhvcNAQEBBQADggEPADCCAQoCggEBAOLP4ogV7LdxW1emNnnTpeV6HwMFlJSL YRsjiqNGjUka/9beD+wobv0TLv+nyEIudO/LY1o0hakEp0UZ3D2nxUbl0oMSCRge j1fXyjP1nieFsAslHuIGfFdaOPYS/Z4Bu9P56R09lIEi/j2YrFSPFhjfhe1e2Qnf RYlS/byYuNDJ4hLHIqmc63mgZEqv7rFOCfEYmdeOJvWcJoZHuKk2bcgkMqNTNl/B Yi1Y3pHqUjBKNeqvRu61ZGbYQAdC1UVssLd5fqozunyD26T9oDaCn13aUe+ThzAh +ZbYLK/1Kg7/OGO42cLU/KlVhJozfpSueajPkSrU72QwvSHASIGqu8sCAwEAAaOC AmIwggJeMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYB BQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUrJ1VL5iIt9iv6/Hu1xyYarru CRcwHwYDVR0jBBgwFoAUqEpqYwR93brm0Tm3pkVl7/Oo7KEwbwYIKwYBBQUHAQEE YzBhMC4GCCsGAQUFBzABhiJodHRwOi8vb2NzcC5pbnQteDMubGV0c2VuY3J5cHQu b3JnMC8GCCsGAQUFBzAChiNodHRwOi8vY2VydC5pbnQteDMubGV0c2VuY3J5cHQu b3JnLzAaBgNVHREEEzARgg9ldmFsLmNvbmp1ci5vcmcwTAYDVR0gBEUwQzAIBgZn gQwBAgEwNwYLKwYBBAGC3xMBAQEwKDAmBggrBgEFBQcCARYaaHR0cDovL2Nwcy5s ZXRzZW5jcnlwdC5vcmcwggECBgorBgEEAdZ5AgQCBIHzBIHwAO4AdQB0ftqDMa0z EJEhnM4lT0Jwwr/9XkIgCMY3NXnmEHvMVgAAAWhUPmmxAAAEAwBGMEQCIEzR+kBk IcjtbjUrieOxn7CXIhXYZUVClWk2SMIigpMxAiBRBvNw+L/UgtLqB7N7wr4yrbz5 DGqBhPfGwrL8TKg9pQB1ACk8UZZUyDlluqpQ/FgH1Ldvv1h6KXLcpMMM9OVFR/R4 AAABaFQ+aaUAAAQDAEYwRAIgckH7vMTd2zcd0JPlb1j8wTwqAjY3GyVrxoe7rPpW UmwCIBMMJLioLgbF5acWqS7LsE7JRaZWnEwtq9IuT1N/ZJ1NMA0GCSqGSIb3DQEB CwUAA4IBAQBegJfnVGDYvvzdTFWdF1KLyIMgYy0gOPJJ1XG8VVINRz45K405oMG1 JHSPfg2sYQ2xWY3sOCB7OfEwEQ2p1w8IWI5NepHKjSmGG9WuDw+RQFSVqK9xp7TB aNH9t6gTgGOV5DnxCtn7R+QE5CIUvSMXb6dcqwV4aEPAQiiupzjvPo3NfGF0Mm1T qbxNCZ180YvZM56SNZz+2PHeA3BtSlWch9cL2Wp+Uhd5Y4Zca6gQbF6ydPmr833k IcfIFhWTjc+Nvvrz8GM86zRCmA/A5+jdcnf/HWVn4rDSusUtRFqCwI82v57jj55r J6w1p0fbJNO8op/JV1iaZTVmPUMtcxF5
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/ MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT DkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow SjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT GkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC AQ8AMIIBCgKCAQEAnNMM8FrlLke3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF q6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8 SMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0 Z8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA a6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj /PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIDAQABo4IBfTCCAXkwEgYDVR0T AQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG CCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv bTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k c3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAw VAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC ARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz MDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu Y3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF AAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo uM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/ wApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwu X4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG PfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6 KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==
-----END CERTIFICATE-----`

		config := Config{Account: "account", ApplianceURL: "appliance-url", SSLCert: cert}

		client, err := newClientWithAuthenticator(config, nil)

		So(err, ShouldBeNil)
		So(client, ShouldNotBeNil)
	})

	Convey("Returns client without error for valid SSL Cert will data on single line", t, func() {

		cert := `-----BEGIN CERTIFICATE-----
MIIFVDCCBDygAwIBAgISBAMVsKsSHyo47axxdaTndZR+MA0GCSqGSIb3DQEBCwUAMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQDExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xOTAxMTYwMDIwMDJaFw0xOTA0MTYwMDIwMDJaMBoxGDAWBgNVBAMTD2V2YWwuY29uanVyLm9yZzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOLP4ogV7LdxW1emNnnTpeV6HwMFlJSLYRsjiqNGjUka/9beD+wobv0TLv+nyEIudO/LY1o0hakEp0UZ3D2nxUbl0oMSCRgej1fXyjP1nieFsAslHuIGfFdaOPYS/Z4Bu9P56R09lIEi/j2YrFSPFhjfhe1e2QnfRYlS/byYuNDJ4hLHIqmc63mgZEqv7rFOCfEYmdeOJvWcJoZHuKk2bcgkMqNTNl/BYi1Y3pHqUjBKNeqvRu61ZGbYQAdC1UVssLd5fqozunyD26T9oDaCn13aUe+ThzAh+ZbYLK/1Kg7/OGO42cLU/KlVhJozfpSueajPkSrU72QwvSHASIGqu8sCAwEAAaOCAmIwggJeMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUrJ1VL5iIt9iv6/Hu1xyYarruCRcwHwYDVR0jBBgwFoAUqEpqYwR93brm0Tm3pkVl7/Oo7KEwbwYIKwYBBQUHAQEEYzBhMC4GCCsGAQUFBzABhiJodHRwOi8vb2NzcC5pbnQteDMubGV0c2VuY3J5cHQub3JnMC8GCCsGAQUFBzAChiNodHRwOi8vY2VydC5pbnQteDMubGV0c2VuY3J5cHQub3JnLzAaBgNVHREEEzARgg9ldmFsLmNvbmp1ci5vcmcwTAYDVR0gBEUwQzAIBgZngQwBAgEwNwYLKwYBBAGC3xMBAQEwKDAmBggrBgEFBQcCARYaaHR0cDovL2Nwcy5sZXRzZW5jcnlwdC5vcmcwggECBgorBgEEAdZ5AgQCBIHzBIHwAO4AdQB0ftqDMa0zEJEhnM4lT0Jwwr/9XkIgCMY3NXnmEHvMVgAAAWhUPmmxAAAEAwBGMEQCIEzR+kBkIcjtbjUrieOxn7CXIhXYZUVClWk2SMIigpMxAiBRBvNw+L/UgtLqB7N7wr4yrbz5DGqBhPfGwrL8TKg9pQB1ACk8UZZUyDlluqpQ/FgH1Ldvv1h6KXLcpMMM9OVFR/R4AAABaFQ+aaUAAAQDAEYwRAIgckH7vMTd2zcd0JPlb1j8wTwqAjY3GyVrxoe7rPpWUmwCIBMMJLioLgbF5acWqS7LsE7JRaZWnEwtq9IuT1N/ZJ1NMA0GCSqGSIb3DQEBCwUAA4IBAQBegJfnVGDYvvzdTFWdF1KLyIMgYy0gOPJJ1XG8VVINRz45K405oMG1JHSPfg2sYQ2xWY3sOCB7OfEwEQ2p1w8IWI5NepHKjSmGG9WuDw+RQFSVqK9xp7TBaNH9t6gTgGOV5DnxCtn7R+QE5CIUvSMXb6dcqwV4aEPAQiiupzjvPo3NfGF0Mm1TqbxNCZ180YvZM56SNZz+2PHeA3BtSlWch9cL2Wp+Uhd5Y4Zca6gQbF6ydPmr833kIcfIFhWTjc+Nvvrz8GM86zRCmA/A5+jdcnf/HWVn4rDSusUtRFqCwI82v57jj55rJ6w1p0fbJNO8op/JV1iaZTVmPUMtcxF5
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMTDkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0NlowSjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMTGkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnNMM8FrlLke3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EFq6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8SMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0Z8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWAa6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj/PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIDAQABo4IBfTCCAXkwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIGCCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNvbTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9kc3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAwVAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcCARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAzMDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwuY3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsFAAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJouM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/wApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwuX4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlGPfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==
-----END CERTIFICATE-----`

		config := Config{Account: "account", ApplianceURL: "appliance-url", SSLCert: cert}

		client, err := newClientWithAuthenticator(config, nil)

		So(err, ShouldBeNil)
		So(client, ShouldNotBeNil)
	})
}
